{"version":3,"sources":["d20.gif","TheDice.jsx","InputChoose.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TheDice","props","state","numberDice","undefined","imgDice","rollDice","bind","number","Math","round","random","this","diceSide","setState","prevState","src","D20","width","alt","setTimeout","className","type","onClick","Component","InputChoose","diceRolled","changeInput","e","Number","target","value","htmlFor","onChange","name","id","selected","Footer","href","rel","App","choosenDice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,iC,uQCItBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,gBAAYC,EACZC,aAASD,GAGX,EAAKE,SAAW,EAAKA,SAASC,KAAd,gBAPC,E,8KAWXC,EAASC,KAAKC,MAAMD,KAAKE,UAAYC,KAAKX,MAAMY,SAAW,GAAK,GACtED,KAAKE,UAAS,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCV,QAAS,yBAAKW,IAAKC,IAAKC,MAAM,OAAOC,IAAI,kBACvFC,YAAW,WACT,EAAKN,UAAS,iBAAO,CAAET,aAASD,MAChC,EAAKU,UAAS,iBAAO,CAAEX,WAAYK,QAClC,MACHY,YAAW,WACT,EAAKN,UAAS,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCZ,gBAAYC,SACzD,K,qIAGK,IACAS,EAAaD,KAAKX,MAAlBY,SADD,EAEyBD,KAAKV,MAA7BG,EAFD,EAECA,QAASF,EAFV,EAEUA,WACjB,OACE,6BACE,wBAAIkB,UAAU,aAAd,IAA4BR,GAC5B,4BAAQQ,UAAU,aAAaC,KAAK,SAASC,QAASX,KAAKN,UAA3D,QAGA,wBAAIe,UAAU,eACXhB,EACAF,Q,GAlC0BqB,aCChBC,G,wDACnB,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXwB,WAAY,GAGd,EAAKC,YAAc,EAAKA,YAAYpB,KAAjB,gBANF,E,wDASPqB,GACVhB,KAAKE,SAAS,CAAEY,WAAYG,OAAOD,EAAEE,OAAOC,W,+BAI5C,OACE,yBAAKV,UAAU,kBACb,0BAAMA,UAAU,QACd,2BAAOA,UAAU,YAAYW,QAAQ,YAArC,mBAGA,4BAAQX,UAAU,cAAcY,SAAUrB,KAAKe,YAAaO,KAAK,WAAWC,GAAG,YAC7E,4BAAQJ,MAAM,KAAd,MACA,4BAAQA,MAAM,KAAd,MACA,4BAAQK,SAAS,WAAWL,MAAM,KAAlC,MAGA,4BAAQA,MAAM,KAAd,MACA,4BAAQA,MAAM,MAAd,OACA,4BAAQA,MAAM,MAAd,OACA,4BAAQA,MAAM,MAAd,OACA,4BAAQA,MAAM,OAAd,UAGJ,kBAAC,EAAD,CAASlB,SAAUD,KAAKV,MAAMwB,WAAYL,UAAU,c,GAlCnBG,cCY1Ba,EAfA,kBACb,gCACE,+CAEE,uBACEC,KAAK,mEACLR,OAAO,SACPS,IAAI,uBAHN,8BCiBSC,E,kDAjBb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXuC,iBAAarC,GAHE,E,qDAOjB,OACE,yBAAKiB,UAAU,OACb,+CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZUG,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0005f6a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/d20.619432a6.gif\";","import React from 'react';\nimport { Component } from 'react';\nimport D20 from './d20.gif';\n\nexport default class TheDice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberDice: undefined,\n      imgDice: undefined,\n    };\n\n    this.rollDice = this.rollDice.bind(this);\n  }\n\n  async rollDice() {\n    const number = Math.round(Math.random() * (this.props.diceSide - 1) + 1);\n    this.setState((prevState) => ({ ...prevState, imgDice: <img src={D20} width=\"70px\" alt=\"dice GIF\" /> }));\n    setTimeout(() => {\n      this.setState(() => ({ imgDice: undefined }));\n      this.setState(() => ({ numberDice: number }));\n    }, 1800);\n    setTimeout(() => {\n      this.setState((prevState) => ({ ...prevState, numberDice: undefined }));\n    }, 10000);\n  }\n\n  render() {\n    const { diceSide } = this.props;\n    const { imgDice, numberDice } = this.state;\n    return (\n      <div>\n        <h1 className=\"titleDice\">D{diceSide}</h1>\n        <button className=\"buttonRoll\" type=\"button\" onClick={this.rollDice}>\n          Roll\n        </button>\n        <h1 className=\"titleRolled\">\n          {imgDice}\n          {numberDice}\n        </h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport TheDice from './TheDice';\nimport './InputChoose.css';\n\nexport default class InputChoose extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      diceRolled: 6,\n    };\n\n    this.changeInput = this.changeInput.bind(this);\n  }\n\n  changeInput(e) {\n    this.setState({ diceRolled: Number(e.target.value) });\n  }\n\n  render() {\n    return (\n      <div className=\"dice-container\">\n        <form className=\"form\">\n          <label className=\"labelDice\" htmlFor=\"diceSide\">\n            Choose the dice\n          </label>\n          <select className=\"selectInput\" onChange={this.changeInput} name=\"diceSide\" id=\"diceSide\">\n            <option value=\"3\">D3</option>\n            <option value=\"4\">D4</option>\n            <option selected=\"selected\" value=\"6\">\n              D6\n            </option>\n            <option value=\"8\">D8</option>\n            <option value=\"10\">D10</option>\n            <option value=\"12\">D12</option>\n            <option value=\"20\">D20</option>\n            <option value=\"100\">D100</option>\n          </select>\n        </form>\n        <TheDice diceSide={this.state.diceRolled} className=\"dice\" />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nconst Footer = () => (\n  <footer>\n    <p>\n      Developed by &nbsp;\n      <a\n        href=\"https://www.linkedin.com/in/henrique-ba%C3%AAta-leite-785a4b15a/\"\n        target=\"_blank\"\n        rel=\"noreferrer nofollow\"\n      >\n        Henrique BaÃªta Leite\n      </a>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport InputChoose from './InputChoose';\nimport Footer from './Footer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      choosenDice: undefined,\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Roll your dice!</h1>\n        <InputChoose />        \n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}